#################
#    INIT
#################

fpath=(~/.zsh/completion $fpath)
autoload -Uz compinit && compinit -i

export PATH="/usr/local/bin:/usr/local/sbin:$PATH"
export PATH="$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin"
export PATH="$PATH:$GOPATH/bin"
export PATH="$PATH:$HOME/.linkerd2/bin"

[ -f '/usr/local/sbin/google-cloud-sdk/path.zsh.inc' ] && source '/usr/local/sbin/google-cloud-sdk/path.zsh.inc'
[ -f '/usr/local/sbin/google-cloud-sdk/completion.zsh.inc' ] && source '/usr/local/sbin/google-cloud-sdk/completion.zsh.inc'

export EDITOR="vim"
export TERM=screen-256color-bce
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export CLICOLOR=1
export GOPATH=$HOME/go

# support colors in less
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

export PGCONNECT_TIMEOUT=5

# use emacs-style bindings
bindkey -e

# Use ^U to delete everything to the left
bindkey '^U' backward-kill-line

unsetopt correct_all
setopt auto_cd

[ -e ~/.zshrc-private ] && source ~/.zshrc-private
[ -e ~/.z.sh ] && source ~/.z.sh
[ -e ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -e ~/.svnhelpers ] && source ~/.svnhelpers

eval "$(direnv hook zsh)"

. $HOME/.asdf/asdf.sh


# =============
#    HISTORY
# =============

## Command history configuration
if [ -z "$HISTFILE" ]; then
  HISTFILE=$HOME/.zsh_history
fi

HISTSIZE=1000000
SAVEHIST=1000000

setopt append_history
setopt extended_history
setopt hist_expire_dups_first
# ignore duplication command history list
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
# share command history data
setopt share_history


# =============
#    ALIAS
# =============

alias k="kubectl"
alias ka="kubectl apply -f"
alias stag="kubectl config use-context staging"
alias prod="kubectl config use-context production"
alias spinn="kubectl config use-context spinnaker"
alias kip="kubectl config use-context docker-for-desktop"
alias empty_char="echo -e \"\u200f\" | pbcopy"
alias ez="vim ~/.zshrc"
alias v="vim ~/.vim/vimrc"
alias vi="vim"
alias reload="exec $SHELL --login"
alias r="bin/rails"
alias t="bin/rails test"
alias be="bundle exec"
alias l="ls -lha"
alias todo="vim ~/Dropbox/.todo"
alias as="vim ~/Dropbox/.alphasights-todo"
alias jpdf="/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py"
alias nombom='npm cache clear && bower cache clean && rm -rf node_modules bower_components && npm install && bower install'
alias remove_merged="git branch --merged | grep -v \"\*\" | grep -v master | xargs git branch -d"
alias reset_rabbit="rabbitmqctl stop_app && rabbitmqctl reset && rabbitmqctl start_app"
alias reset_rabbit_docker="docker start rabbitmq && docker exec rabbitmq bash -c 'rabbitmqctl stop_app && rabbitmqctl reset' && docker restart rabbitmq"
alias ss="spring stop"
alias htop="sudo htop"
alias mux="tmuxinator"
alias ux="mux"
alias format_json="python -m json.tool"
alias dc="docker-compose"
alias watch='watch ' # this makes `watch` work with other aliases, like `watch l`
alias flush_dns="sudo killall -HUP mDNSResponder"
alias w="watch"
alias klogs="kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{\"\n\"}}{{end}}' | fzy | xargs kubectl logs -f --tail 50"
alias kcc="kubectl config current-context"
alias kgc="kubectl config get-contexts"
alias kutil='kubectl get nodes --no-headers | awk '\''{print $1}'\'' | xargs -I {} sh -c '\''echo {} ; kubectl describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo '\'''
alias test_iops="dd if=/dev/zero of=test.dat bs=1024 count=100000"
alias ecr_login="aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 579859358947.dkr.ecr.us-east-1.amazonaws.com"

# git
alias g="git"
alias ga="g add -A"
alias gb="g branch"
alias gs="g status"
alias gl="git log --pretty=format:'%C(yellow)%h %Cblue%>(12)%ad %Cgreen%<(20)%aN%Cred%d %Creset%s'"
alias glm="gl --author=Brian"
alias gc="g commit --verbose"
alias gch="g checkout"
alias gp="g push -u"
alias gpp="gp && gpr"
alias gd="g diff --no-prefix"
alias gdc="g diff --cached --no-prefix"
alias gpr="hub pull-request -o"


# ======================
#    UTILITY FUNCTIONS
# ======================

kexec() {
  kubectl exec -it $(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | fzy) -- sh
}

kuc() {
  kubectl config use-context $1
}

restart_all_deployments() {
  kubectl get deployments --no-headers | awk '{print $1}' | xargs kubectl rollout restart deployment
}

delete_all_completed_jobs() {
  ns=${1:-default}
  kubectl -n $ns delete job $(kubectl -n $ns get job -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')
}

list_sizes() { for file in *; do; du -sh "$file"; done }

# Use fzy to select branch to checkout
b() { git checkout `git branch | fzy` }

remove_all_containers() { docker container rm -f $(docker container ps -a -q) }

remove_all_images() { docker image rm -f $(docker images -a -q) }

man() { PAGER="/bin/sh -c \"col -b | vim -R -c 'set ft=man' -\"" command man $@ }

# show processes running on a given port
showp() { lsof -i tcp:$1 }

# kills every process running on a given port
killp() {
  OLD_IFS=$IFS;

  lsof -i :$1 | grep TCP | while IFS= read -r line ; do
    kill -9 `echo $line | awk '{ print $2 }'`;
    echo `echo $line | awk '{ print $1 }'`" killed";
  done

  IFS=$OLD_IFS;
}

# finds process using `fzy` and kill it
kills() {
  kill -9 `ps axww -o pid,user,%cpu,%mem,start,time,command | fzy | sed 's/^ *//' | cut -f1 -d' '`
}

s() {
  if [ -f mix.exs ]; then
    echo "mix phoenix.server $@"
    mix phoenix.server $@
  else
    echo "rails server -b 0.0.0.0 $@ | timing"
    rails server -b 0.0.0.0 2>&1 $@ | timing
  fi
}

ff() { find_type "f" $@ }
fl() { find_type "l" $@ }
fd() { find_type "d" $@ }

find_type() {
  search_type=$1
  name=$2
  shift 2
  find . -type $search_type -iname "*$name*" $@
}

pa() { ps aux | ag -i $1 }

ip() { ifconfig -a | grep inet | grep broadcast | awk '{ print $2 }' }

size() { du -sh $@ }

loop() { while [ true ]; do; $@; done; }

# replace_all foo bar
# find "foo" in every file and replace it with "bar"
replace_all() { ag "$1" -l | xargs sed -i '' -e "s/$1/$2/g" }

# kill all suspended jobs
kj() { for id in $(jobs -p | grep "\[\d\]" -o | grep "\d" -o); do disown %$id 2>/dev/null; done }

# Lazy load kubectl autocomplete
kubectl() {
  if [[ -z $KUBECTL_AUTOCOMPLETION_LOADED ]]; then
      KUBECTL_AUTOCOMPLETION_LOADED=1
      source <(kubectl completion zsh)
  fi

  command kubectl $@
}

h() {
  local cmd=$(tail -r ~/.zsh_history | fzy | cut -d ";" -f 2)
  echo $cmd
  eval $cmd
}

kc() {
  kubectl config use-context $(kubectl config get-contexts --output name | fzy)
}

# =============
#    PROMPT
# =============

autoload -U colors && colors
setopt promptsubst

git_prompt_info () {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$ZSH_THEME_GIT_PROMPT_SUFFIX"
}

kube_context() {
  context=$(cat ~/.kube/config | grep "current-context:" | sed "s/current-context: //")
  if [[ -n $context ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_PREFIX$context$ZSH_THEME_GIT_PROMPT_SUFFIX"
  fi
}

PROMPT='
%{$fg_bold[green]%}${PWD/#$HOME/~}%{$reset_color%}$(git_prompt_info)$(kube_context)
$ '

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[black]%} ("
ZSH_THEME_GIT_PROMPT_SUFFIX=")%{$reset_color%}"


# ===================
#    AUTOCOMPLETION
# ===================

# enable completion
autoload -Uz compinit
compinit

zmodload -i zsh/complist

WORDCHARS=''

unsetopt menu_complete   # do not autoselect the first completion entry
unsetopt flowcontrol
setopt auto_menu         # show completion menu on successive tab press
setopt complete_in_word
setopt always_to_end

# autocompletion with an arrow-key driven interface
zstyle ':completion:*:*:*:*:*' menu select

# case-insentive autocompletion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'

# use different colors for directories and files
zstyle ':completion:*' list-colors ''

# format autocompletion for `kill -9 {string}`
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"

# Automatically update PATH entries
zstyle ':completion:*' rehash true

# Keep directories and files separated
zstyle ':completion:*' list-dirs-first true

# Edit the current command line in $EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line
